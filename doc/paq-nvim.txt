*paq-nvim.txt*  Package manager for Neovim v0.4.4      Last change: 2021-03-23
*paq-nvim*
*paq*

Author: Sergio Alejandro Vargas    <savargasqu+git@unal.edu.co>

License: MIT

==============================================================================
CONTENTS                                                        *paq-contents*

  Introduction                                            |paq-introduction|
    Features
  Usage                                                   |paq-usage|
  Functions and Commands                                  |paq-commands|
  Package options                                         |paq-options|
  Commands                                                |paq-commands|
  Paq directory                                           |paq-dir|
  Paq log                                                 |paq-log|
  Miscellaneous                                           |paq-misc|
    Using local packages
    Lazy loading


==============================================================================
INTRODUCTION                                                *paq-introduction*

Paq is a Neovim package manager. It can install, update and remove packages
from any valid git repository, and it includes a familiar shorthand for
GitHub repositories.

Paq is written in Lua. It uses the |loop| API to install and update packages
asynchronously, and it stores packages in |packpath| directories.

Paq is for Neovim users who use Lua as their configuration language. It was
written to be a wrapper around existing Neovim features, and to have a simple
and familiar interface for declaring packages.

Paq doesn't modify the |runtimepath|. Nowadays Neovim provides more structured
ways to handle package loading, that can be used without any any special
scripting.

NOTE: Requirements and installation instructions can be found in the README.


------------------------------------------------------------------------------
FEATURES~

- Easy to use and configure

- Fast installation and updating using Neovim's |loop|

- Small implementation, around 150 LOC


==============================================================================
USAGE                                                              *paq-usage*

To get started with Paq:

 1. Import the `paq-nvim` module, and bind the `paq` function:
 >
    vim.cmd('packadd paq-nvim')
    local Paq = require'paq-nvim'    -- Module
    local paq = Paq.paq              -- Function
    paq{'savq/paq-nvim', opt=true}   -- Paq manages itself
<

 2. List the packages you want to install using the `paq` function with the
    name of a package repository, for example:
>
    paq 'lervag/vimtex'
<

 3. Run the `:PaqInstall` command.

That's it!


==============================================================================
FUNCTIONS AND COMMANDS                                          *paq-commands*
                                                               *paq-functions*

The Paq module exports multiple functions. Most of these functions have a
command alias to make them easier to call on demand. Assuming the module is
imported as `Paq`, the functions are:

|Paq.paq|                                                            *Paq.paq*

  Add a package to Paq's (internal) list. It can take a table or a string.
  When a table is passed, the first value has to be a string with the name of
  the repository, like: `'<GitHub-username>/<repository-name>'`.
  The other key-value pairs in the table have to be named explicitly, see
  |paq-options|. If only a string is passed, it works as if it was the first
  value of the table, and all other options will be set to their default
  values.

  Note: Lua can elide parentheses when passing a table or a string to a
  function, so you can always call `paq` without parentheses.


|Paq.install|                                                    *Paq.install*
                                                               *:PaqInstall*
  Installs all packages listed on your configuration, if a package is already
  installed, the function ignores it.


|Paq.update|                                                      *Paq.update*
                                                                *:PaqUpdate*
  Updates the installed packages listed on your configuration. If a package
  hasn't been installed with |PaqInstall|, the function ignores it.


|Paq.clean|                                                        *Paq.clean*
                                                                 *:PaqClean*
  Removes packages found on |paq-dir| that aren't listed in your
  configuration.


|Paq.log_open|                                                  *Paq.log_open*
                                                               *:PaqLogOpen*
  Opens the |paq-log| file in a split window.


|Paq.log_clean|                                                *Paq.log_clean*
                                                              *:PaqLogClean*
  Deletes the |paq-log| file.


|Paq.setup|                                                        *Paq.setup*

  Configures specific global behavior. It takes as single input a table,
  which can have a key `path` to overwrite the default value for |paq-dir|.
  This functionality exists mainly to allow testing without altering a
  user's configuration.


==============================================================================
PACKAGE OPTIONS                                                  *paq-options*

You can pass a table with named options to the |Paq.paq| function.
These options don't need to be in any particular order, as long as the
name of the repository is the first element on the table.

The options are the following:

`as`
  String indicating the alias or name of the plugin, which determines the name
  of the directory where Paq will download the plugin.

  If left unspecified, Paq will infer it from the plugin string.
  For `'<GitHub-username>/<repo-name>'` that is `<repo-name>`.

  Default value: `nil`


`branch`
  String with the name of a branch of the git repository. Paq will fetch
  and pull changes from this branch.

  Default value: `nil`


`run`
  Either a string or a function to be executed after installing or updating
  a package. Useful for packages that require extra configuration or
  building binaries.

  If a string, Paq will execute the string as a shell command in the 
  directory of the package.

  If a function, Paq will execute the function right after installing
  the package. The function cannot take any arguments.

  Note that in nvim 0.5, you can wrap a VimL function like so:
>
    paq{ '<name-of-package>', run=vim.fn['<name-of-viml-function>'] }
<

  Default value: `nil`


`hook`
  Deprecated. Use the `run` option instead.


`opt`
  Boolean indicating whether the package is optional or not. If set,
  the package will be in the optional packages directory. See |packages|
  and |packadd|.

  Default value: `false`


`url`
  String indicating the URL of the git repository. This allows Paq to
  download packages from any website. For convenience, if `url` is unset,
  Paq will try to find the repository on GitHub.com.

  Default value: `'https://github.com/' .. '<GitHub-username>/<repo-name>'`


Example~

The language client `coc.nvim` recommends installing the release branch of
their repository. If we also wanted to install it as an optional package,
we could call `paq` like:
>
    paq {'neoclide/coc.nvim', opt=true, branch='release'}
<

==============================================================================
PAQ DIRECTORY                                                        *paq-dir*

Paq installs packages using Neovim's |packages| convention, which itself
follows the XDG Base Directory specification. You can find the directory
where Paq installs packages by running the command:
>
    :echo stdpath('data') .. '/site/pack/paqs'
<
If you have packages that aren't managed by Paq, you shouldn't put them on
Paq's directory, since |Paq.clean| could delete them.


==============================================================================
PAQ LOG                                                              *paq-log*

Paq writes the `stderr` output of external processes to a log file.
The log file can be found at:
>
    :echo stdpath('cache') .. '/paq.log'
<

==============================================================================
PAQ MISCELLANEOUS                                                   *paq-misc*

These are some features related to using packages, which probably don't
require Paq. Either because there's already a way to do it in Neovim, or
because they're out of scope for the project.


------------------------------------------------------------------------------
Using local packages~

You don't need Paq to use local packages. Neovim already provides ways to
load a local plugin, namely:

- Add it to a directory in |packpath| (different from |paq-dir|)
- Modify the |runtimepath| directly

The second option just requires you to concatenate the path to the plugin to
your `runtimepath`. In lua, this looks like:
>
    vim.o.runtimepath = vim.o.runtimepath .. ",~/path/to/your/plugin"
<
Use an absolute path, and don't forget the comma!


------------------------------------------------------------------------------
Lazy loading~

Paq doesn't provide a mechanism to lazy load packages. Before considering
if a package needs to be lazy loaded:

1. Be sure to profile your startup time with the |--startuptime| flag.
2. For VimL plugins, check if the package uses the |autoload| feature.
3. For Lua plugins, check if the package is properly modularized in the `lua/`
   directory.

If the package doesn't do 2. or 3. consider opening an issue in that package's
issue tracker rather than Paq's. It'll help users of other package managers
too.

If you've checked all that and still think that the package _has_ to be lazy
loaded, you can declare the package as optional, and call |packadd| when
needed.

You can use an |autocommand| to do the lazy loading, but at the time of
writing there isn't a way to declare an autocommand using only Lua.

Example:
>
    paq {'author/heavy-plugin', opt=true}
    vim.cmd [[autocmd Filetype ruby packadd! heavy-plugin]]
<

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
