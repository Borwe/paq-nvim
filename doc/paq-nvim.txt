*paq-nvim.txt*  Package manager for Nvim version 0.4.4 Last change: 2021-02-17
*paq-nvim*
*paq*

Author: Sergio Alejandro Vargas    <savargasqu+git@unal.edu.co>


==============================================================================
CONTENTS                                                        *paq-contents*

  Introduction                                            |paq-introduction|
    Features                                              |paq-features|
  Usage                                                   |paq-usage|
  Functions and Commands                                  |paq-commands|
  Package options                                         |paq-options|
  Commands                                                |paq-commands|
  Paq directory                                           |paq-directory|
  Paq log                                                 |paq-log|


==============================================================================
INTRODUCTION                                                *paq-introduction*

Paq is a Neovim package manager. It can install, update and remove packages
from any valid git repository, and it includes a familiar shorthand for
GitHub repositories.

Paq is written in Lua; it uses the |loop| API to install and update
packages asynchronously, and it stores packages in |packpath| directories.

Paq is for Nvim users who use Lua as their configuration language.
It was written to be a wrapper around existing Nvim features, and to have
a simple and familiar interface for declaring packages.


------------------------------------------------------------------------------
FEATURES                                                        *paq-features*

- Easy to use and configure

- Fast installation and updating using Nvim's |loop|

- Small implementation, around 150 LOC


==============================================================================
USAGE                                                              *paq-usage*

To get started with Paq:

 1. Import the `paq-nvim` module to your Lua configuration, and bind the `paq`
    function:
 >
    vim.cmd['packadd paq-nvim']
    local Paq = require'paq-nvim' -- Module
    local paq = Paq.paq           -- Function
    paq 'savq/paq-nvim'           -- Paq manages itself
<

 2. List the packages you want to install using the `paq` function with the
    name of a package repository, for example:
>
    paq 'lervag/vimtex'
<

 3. Run the `:PaqInstall` command.

That's it!


==============================================================================
FUNCTIONS AND COMMANDS                                          *paq-commands*
                                                               *paq-functions*

The Paq module exports four functions. Three of these have a command alias,
making it easier to call the functions on demand. Assuming the module is
imported as `Paq`, we have:

|Paq.paq|                                                            *Paq.paq*

  Add a package to Paq's (internal) list. It can take a table or a string.
  When a table is passed, the first value has to be a string with the name of
  the repository, like: `'<GitHub-username>/<repository-name>'`.
  The other key-value pairs in the table have to be named explicitly,
  see |paq-options|. If only a string is passed, it works as if it was the
  first value of the table, and all other options will be set to their default
  values.

  Note: Lua can elide parentheses when passing a table or a string to a
  function, so you can always call `paq` without parentheses.


|Paq.install|                                                    *Paq.install*
                                                               *:PaqInstall*
  Install all packages listed on your configuration, if a package is already
  installed, the function ignores it.


|Paq.update|                                                      *Paq.update*
                                                                *:PaqUpdate*
  Update the installed packages listed on your configuration. If a package
  hasn't been installed with |PaqInstall|, the function ignores it.


|Paq.clean|                                                        *Paq.clean*
                                                                 *:PaqClean*
  Remove packages that are on |paq-directory|, but aren't listed in your
  configuration.


|Paq.log_open|                                                  *Paq.log_open*
                                                               *:PaqLogOpen*
  Open the |paq-log| file in a split window.


|Paq.log_clean|                                                *Paq.log_clean*
                                                              *:PaqLogClean*
  Delete the |paq-log| file.


==============================================================================
PACKAGE OPTIONS                                                  *paq-options*

When adding a package using the |Paq.paq| function, you can pass a table with
some named options. These options don't need to be in a particular order,
as long as the name of the repository is the first thing on the table.

The options are the following:

`as`
  String indicating the alias or name of the plugin, which determines the name
  of the directory where Paq will download the plugin.

  If left unspecified, Paq will infer it from the plugin string. For
  `'<GitHub-username>/<repo-name>'` that is `<repo-name>`.

  Default value: `nil`


`branch`
  String with the name of a branch of the git repository. If set,
  Paq will only download that specific branch.

  Default value: `nil`


`run`
  Either a string or a function to be executed after installing or updating
  a package. Useful for packages that require extra configuration or
  building binaries.

  If a string, Paq will execute the string as a shell command in the 
  directory of the package.

  If a function, Paq will execute the function right after installing
  the package. The function cannot take any arguments.

  Also note that you can wrap a VimL function like so:
>
    paq{ '<name-of-package>', run=vim.fn['<name-of-viml-function>'] }
<

  Default value: `nil`


`hook`
  Deprecated. Use the `run` option instead.


`opt`
  Boolean indicating whether the package is optional or not. If set,
  the package will be in the optional packages directory. See |packages|
  and |packadd|.

  Default value: `false`


`url`
  String indicating the URL of the git repository. This allows Paq to
  download packages from any website; however, for convenience, if not set,
  Paq will try to find the repository on GitHub.com.

  Default value: `'https://github.com/'..'<GitHub-username>/<repo-name>'`


Example~

The language client `coc.nvim` recommends installing the release branch of
their repository, if we wanted to also install it as an optional package,
we could call `paq` like:
>
    paq {'neoclide/coc.nvim', opt=true, branch='release'}
<

==============================================================================
PAQ DIRECTORY                                                  *paq-directory*

Paq installs packages using Nvim's |packages| convention, which itself
follows the XDG Base Directory specification. You can find the directory
where Paq installs packages by running the command:
>
    :echo stdpath('data') .. '/site/pack/paqs'
<
If you have packages that aren't managed by Paq, you shouldn't put them on
Paq's directory, since |Paq.clean| could delete them.


==============================================================================
PAQ LOG                                                              *paq-log*

Paq writes the `stderr` output of external processes to a log file.
The log file can be found at:
>
    :echo stdpath('cache') .. '/paq.log'
<

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:
